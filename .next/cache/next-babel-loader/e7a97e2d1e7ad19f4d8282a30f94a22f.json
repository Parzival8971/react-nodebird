{"ast":null,"code":"import axios from 'axios';\nimport shortId from 'shortid';\nimport { all, delay, fork, put, takeLatest, throttle } from 'redux-saga/effects';\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, generateDummyPost, LOAD_POSTS_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\n\nfunction loadPostsAPI(data) {\n  return axios.get('/api/posts', data);\n}\n\nfunction* loadPosts(action) {\n  try {\n    // const result = yield call(loadPostsAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: generateDummyPost(10)\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction addPostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction* addPost(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data);\n    yield delay(1000);\n    const id = shortId.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data\n      }\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.delete('/api/post', data);\n}\n\nfunction* removePost(action) {\n  try {\n    // const result = yield call(removePostAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/api/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    // const result = yield call(addCommentAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchLoadPosts() {\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchLoadPosts), fork(watchRemovePost), fork(watchAddComment)]);\n}","map":{"version":3,"names":["axios","shortId","all","delay","fork","put","takeLatest","throttle","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","generateDummyPost","LOAD_POSTS_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","ADD_POST_TO_ME","REMOVE_POST_OF_ME","loadPostsAPI","data","get","loadPosts","action","type","err","console","error","response","addPostAPI","post","addPost","id","generate","content","removePostAPI","delete","removePost","addCommentAPI","postId","addComment","watchLoadPosts","watchAddPost","watchRemovePost","watchAddComment","postSaga"],"sources":["/Users/eomseonghun/Desktop/react-nodebird/prepare/front/sagas/post.js"],"sourcesContent":["import axios from 'axios';\nimport shortId from 'shortid';\nimport {\n  all,\n  delay,\n  fork,\n  put,\n  takeLatest,\n  throttle,\n} from 'redux-saga/effects';\n\nimport {\n  ADD_COMMENT_FAILURE,\n  ADD_COMMENT_REQUEST,\n  ADD_COMMENT_SUCCESS,\n  ADD_POST_FAILURE,\n  ADD_POST_REQUEST,\n  ADD_POST_SUCCESS,\n  generateDummyPost,\n  LOAD_POSTS_FAILURE,\n  LOAD_POSTS_REQUEST,\n  LOAD_POSTS_SUCCESS,\n  REMOVE_POST_FAILURE,\n  REMOVE_POST_REQUEST,\n  REMOVE_POST_SUCCESS,\n} from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\n\nfunction loadPostsAPI(data) {\n  return axios.get('/api/posts', data);\n}\n\nfunction* loadPosts(action) {\n  try {\n    // const result = yield call(loadPostsAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: generateDummyPost(10),\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\nfunction addPostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction* addPost(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data);\n    yield delay(1000);\n    const id = shortId.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data,\n      },\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id,\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.delete('/api/post', data);\n}\n\nfunction* removePost(action) {\n  try {\n    // const result = yield call(removePostAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data,\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data,\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/api/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    // const result = yield call(addCommentAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data,\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\nfunction* watchLoadPosts() {\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([\n    fork(watchAddPost),\n    fork(watchLoadPosts),\n    fork(watchRemovePost),\n    fork(watchAddComment),\n  ]);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}